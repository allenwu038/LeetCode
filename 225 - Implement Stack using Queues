# Python3

# solution 1 - using list
# runtime: faster than 89.28% of submissions
# memory: less than 20.00% of submissions

class MyStack:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.stack = []

    def push(self, x: int) -> None:
        """
        Push element x onto stack.
        """
        self.stack.append(x)
        

    def pop(self) -> int:
        """
        Removes the element on top of the stack and returns that element.
        """
        return self.stack.pop()
        

    def top(self) -> int:
        """
        Get the top element.
        """
        return self.stack[-1]
        

    def empty(self) -> bool:
        """
        Returns whether the stack is empty.
        """
        return True if len(self.stack) < 1 else False
        
        
# solution 2 - using queues
# runtime: faster than 69.95% of submissions
# memory: less than 20.00% of submissions

from queue import Queue

class MyStack:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.stack = Queue()

    def push(self, x: int) -> None:
        """
        Push element x onto stack.
        """
        
        # put all elements from stack to q1
        q1 = Queue()
        while not self.stack.empty():
            q1.put(self.stack.get())
            
        # then add x to stack
        self.stack.put(x)
        
        # then put all elements from q1 into stack
        # so x has effectively been pushed to the front
        while not q1.empty():
            self.stack.put(q1.get())

    def pop(self) -> int:
        """
        Removes the element on top of the stack and returns that element.
        """
        return self.stack.get()

    def top(self) -> int:
        """
        Get the top element.
        """
        # removes top element and saves it as top
        top = self.stack.get()
        
        # push top back on so that our stack is unchanged
        self.push(top)
        
        # return top element
        return top
    
    def empty(self) -> bool:
        """
        Returns whether the stack is empty.
        """
        return self.stack.empty()
