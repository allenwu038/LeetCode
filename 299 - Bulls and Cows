# Python3

# solution 1
# runtime: faster than 51.52% of submissions
# memory: less than 17.78% of submissions
class Solution:
    def getHint(self, secret: str, guess: str) -> str:
        # count bulls 
        bulls = 0
        i = 0
        while i < len(secret):
            if secret[i] == guess[i]:
                bulls += 1
                secret = secret[:i] + secret[i+1:]
                guess = guess[:i] + guess[i+1:]
            else:
                i += 1
        # count cows
        cows = 0
        for num in guess:
            if num in secret:
                cows +=1
                # replace first instance of num in secret
                secret = secret.replace(num, '', 1)
        return str(bulls) + "A" + str(cows) + "B"
        
 
# solution 2
# runtime: faster than 86.07% of submissions
# memory: less than 51.87% of submissions
class Solution:
    def getHint(self, secret: str, guess: str) -> str:
        bulls = 0
        cows = 0
        # dictionary to keep track of number of times digits appear in secret
        # and guess when they are not the same digit in the same place
        # the 0th index tracks secret and the 1st tracks guess
        cowMap = {str(i):[0, 0] for i in range(10)}  
        for i in range(len(secret)):
            # count bulls
            if secret[i] == guess[i]:
                bulls += 1
            else:
                # add to the times this digit appears in secret
                cowMap[secret[i]][0] += 1
                # add to the times this digit appears in secret
                cowMap[guess[i]][1] += 1
        # we want to count cows as the min times a digit 
        # appears out of place in either secret or cows 
        for j in cowMap:
            cows += min(cowMap[j][0], cowMap[j][1])
        return str(bulls) + "A" + str(cows) + "B"
