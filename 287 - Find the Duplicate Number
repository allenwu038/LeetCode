# Python3

# solution 1 - using set()
# runtime: faster than 66.58% of submissions
# memory: faster than 8.26% of submissions
# NOTE: not O(1) space

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        numSet = set()
        for num in nums:
            if num not in numSet:
                numSet.add(num)
            else:
                return num
                
# solution 2 - treat question like there's a cycle    
# runtime: faster than 83.96% of submissions
# memory: less than 81.56% of submissions

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow, fast, res = 0, 0, 0
        slow = nums[slow]
        fast = nums[nums[fast]]
        
        # enter into cycle
        while (fast!=slow):
            slow = nums[slow]
            fast = nums[nums[fast]]
            
        # find where the cycle starts
        fast = 0
        while (res!=slow):
            slow = nums[slow] 
            res = nums[res] 
        return slow
                
                
