# Python3
# runtime: faster than 13.60% of submissions
# memory: less than 45.85% of submissions

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        if numRows == 0:
            return []
        elif numRows == 1:
            return [[1]]
        res = [[1]]
        for i in range(1, numRows):
            subArr = [1]
            # calculate the sums to be added from the 
            # appropirate columns in the row above
            for j in range(1, i):
                subArr.append(res[i-1][j-1] + res[i-1][j])
            # last element in every row of the triangle should be a 1
            subArr.append(1)
            res.append(subArr)
        return res
            
