# Python3

# solution 1
# runtime: faster than 21.00% of submissions
# memory: less than 27.86% of submissions

class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        hashmap = {}
        res = []
        
        for num in nums:
            if num in hashmap:
                hashmap[num] += 1
            else:
                hashmap[num] = 1
        
        for key in hashmap:
            if hashmap[key] == 1:
                res.append(key)
                
        return res
  
 # solution 2
 # runtime: faster than 26.39% of submissions
 # memory: less than 6.33% of submissions
 
 class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        numSet = set()
        for num in nums:
            # if we've seen this number before, it has a duplicate and does not belong in the solution 
            if num in numSet:
                numSet.remove(num)
            else:
                numSet.add(num)
        return numSet
