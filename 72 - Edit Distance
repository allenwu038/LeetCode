# Python3
# runtime: faster than 80.60% of submissions
# memory: less than 36.99% of submissions

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        
        w1, w2 = len(word1), len(word2)
    
        # matrix to fill with the minimunum num of operations
        dp = [ [0] * (w2 + 1) for _ in range(w1 + 1) ]
        
        # populate matrix for the case where one given word is an empty string
        for i in range(w1 + 1):
            dp[i][0] = i
        for j in range(w2 + 1):
            dp[0][j] = j
            
        # count the minimum operations
        for i in range(1, w1 + 1):
            for j in range(1, w2 + 1):
                # don't add to running count if letters match
                if word1[i - 1] == word2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1]
                # add one to minimum running count
                else:
                    dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1])
        
        return dp[w1][w2]
